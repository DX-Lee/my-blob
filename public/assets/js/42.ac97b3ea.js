(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{526:function(t,_,v){"use strict";v.r(_);var e=v(4),a=Object(e.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h4",{attrs:{id:"tcp协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp协议"}},[t._v("#")]),t._v(" TCP协议")]),t._v(" "),v("p",[t._v("TCP 是一个 "),v("strong",[t._v("面向连接")]),t._v("，"),v("strong",[t._v("基于字节流")]),t._v("，"),v("strong",[t._v("可靠的")]),t._v("，"),v("strong",[t._v("全双工")]),t._v("协议。")]),t._v(" "),v("h5",{attrs:{id:"_1-面向连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-面向连接"}},[t._v("#")]),t._v(" 1.面向连接")]),t._v(" "),v("blockquote",[v("p",[t._v("什么是面向连接？")]),t._v(" "),v("p",[t._v('面向连接：面向连接的协议要求在正式发送数据之前需要通过 ”握手“ 建立一个逻辑连接，结束通信时通过"挥手"断开连接')]),t._v(" "),v("p",[t._v("无连接：无连接的协议不需要握手，挥手操作")])]),t._v(" "),v("p",[t._v("​\tTCP 连接时需要三次握手建立连接，断开连接时需要四次挥手断开连接")]),t._v(" "),v("h5",{attrs:{id:"_2-基于字节流"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-基于字节流"}},[t._v("#")]),t._v(" 2.基于字节流")]),t._v(" "),v("p",[t._v("TCP 是一种字节流协议，"),v("strong",[t._v("流的含义是没有固定的报文边界")])]),t._v(" "),v("p",[t._v("假设你调用2次 write 函数往 socket 里依次写入 500 字节，800 字节，write 函数只是把字节拷贝到内核缓冲区，最终会以多少条报文发出去是不确定的。如图：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/3/17/1698a074292fb212?imageslim",alt:"img"}})]),t._v(" "),v("ul",[v("li",[t._v("情况一：分两次报文发出去，依次发送 500，800 字节数据")]),t._v(" "),v("li",[t._v("情况二：两部分数据合并成 长度为 1300 字节的报文，一次性发送出去")]),t._v(" "),v("li",[t._v("情况三：第一部分的 500 字节和第二部分的 500 字节合并为长度 1000 字节的报文，剩下 300 字节单独作为一个报文发送")]),t._v(" "),v("li",[t._v("情况四：第一部分的 400 字节单独发送，剩下的 100 字节和第二部分的 800 字节合并为一个 900 字节的包一起发送")]),t._v(" "),v("li",[t._v("情况N：还有更多可能的拆分组合")])]),t._v(" "),v("p",[t._v("上面的情况取决于诸多因素：路径最大传输单元(MTU)，发送窗口大小，阻塞窗口大小等")]),t._v(" "),v("p",[t._v("总之当接收方从 TCP 套接字读取数据时，没法确定对方每次写入的数据是多少，对方可能分多次发送，每次发送的字节也是不确定的。")]),t._v(" "),v("h5",{attrs:{id:"_3-可靠的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-可靠的"}},[t._v("#")]),t._v(" 3.可靠的")]),t._v(" "),v("p",[t._v("TCP 基于 IP 协议，而 IP 协议是一种无连接，不可靠的协议，它尽最大可能的将数据包从发送端传输给接收端，不保证包的到达顺序与发送顺序一致，也不保证包是否重复，到达。因此 TCP 需要有一套机制来保证可靠性。主要有以下几个方面。")]),t._v(" "),v("ul",[v("li",[t._v("对每个包提供校验和")]),t._v(" "),v("li",[t._v("通过包的序列号解决包重复，乱序问题")]),t._v(" "),v("li",[t._v("超时重传")]),t._v(" "),v("li",[t._v("流量控制，阻塞控制")])]),t._v(" "),v("p",[v("strong",[t._v("校验和")]),t._v(" （checksum）每个 TCP 包头部都有 2 个字节来表示校验和，防止数据在传输过程中损坏，如果 TCP 收到一个校验和有差错的报文，TCP 不会发送任何确认直接丢弃，等待发送端重传")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/9/16dafd4097c7d058?imageslim",alt:"img"}})]),t._v(" "),v("p",[v("strong",[t._v("序列号")]),t._v(" 包的序列号保证包的有序，不重复。例如：由于网络问题导致后发送的数据包先到达，TCP 会根据序列号对数据包进行排序，在将结果传递给上层应用。当收到的包重复时，可能是由于超时重传了两次，但是前面的包并没有丢失，所以接收端会受到两个相同的包，同样的数据可以通过包序号丢弃重复的数据。")]),t._v(" "),v("p",[v("strong",[t._v("超时重传")]),t._v(" TCP 发送一个数据包后会开启一个定时器，等待接受方的确认，如果在指定时间内没有接收到 ACK 确认，TCP 会认为这个数据包丢失了，就会重传数据包并等待更长的时间，如果还没收到就会继续重传，多次重传后仍然失败，TCP 就会丢弃这个包。")]),t._v(" "),v("p",[v("strong",[t._v("流量控制")]),t._v("，"),v("strong",[t._v("阻塞控制")]),t._v("  见后文")]),t._v(" "),v("h5",{attrs:{id:"_4-全双工"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-全双工"}},[t._v("#")]),t._v(" 4. 全双工")]),t._v(" "),v("p",[t._v("TCP 是全双工的。发送端和接收端可以是 客户端/服务器，也可以是 服务器/客户端，双方既可以是发送数据也可以接受数据，"),v("strong",[t._v("每个方向的数据流都独立管理包的序列号，滑动窗口大小，MSS等信息")])]),t._v(" "),v("p",[t._v(":: tip")]),t._v(" "),v("p",[t._v("TCP 和 UDP 的区别")]),t._v(" "),v("p",[t._v("UDP 是"),v("strong",[t._v("无连接")]),t._v('的，不需要通过 "握手" 建立连接。')]),t._v(" "),v("p",[t._v("UDP  不仅支持一对一通信，还支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。")]),t._v(" "),v("p",[t._v("UDP 是"),v("strong",[t._v("面向报文的")]),t._v("，发送端 UDP 对应用程序交付下来的报文只是添加 UDP 头部就向下交付给 IP 层，既不合并也不拆分，而是保留这些报文，因此应用程序必须选择合适的报文。")]),t._v(" "),v("p",[t._v("UDP 是 "),v("strong",[t._v("不可靠的")]),t._v("，由于通信不需要建立连接，发送数据时想发就发，发送数据时也不会关心对方是否正确的接收到数据。没有阻塞控制，会以恒定的速度发送数据，即使网络条件不好也不会调整速率，这样带来的后果就是网络条件不好的情况下会导致丢包，优点也很明显，对于实时性比较强的场景就需要使用UDP。")]),t._v(" "),v("p",[t._v("UDP 头部开销小，只有 8 个字节，相比 TCP 的 20 个字节，在传输数据报文时是很高效的。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"left"}}),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[t._v("UDP")]),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[t._v("TCP")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("是否连接")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("无连接")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("面向连接")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("是否可靠")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("不可靠传输，不使用流量控制和拥塞控制")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("可靠传输，使用流量控制和拥塞控制")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("连接对象个数")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("支持一对一，一对多，多对一和多对多交互通信")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("只能是一对一通信")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("传输方式")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("面向报文")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("面向字节流")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("首部开销")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("首部开销小，仅8字节")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("首部最小20字节，最大60字节")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("适用场景")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("适用于实时应用（IP电话、视频会议、直播等）")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("适用于要求可靠传输的应用，例如文件传输")])])])]),t._v(" "),v("h5",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),v("p",[t._v("TCP 是一种 "),v("strong",[t._v("面向连接的，基于字节流的，可靠的，全双工协议")]),t._v("。通过三次握手建立连接，四次挥手断开连接，发送数据包后会开启一个定时器，超过时间没有受到对端确认后就会重传，接收端利用序列号保证包的有序，丢弃重复数据，TCP 还提供了流量控制，阻塞控制保证了稳定性。")]),t._v(" "),v("p",[v("strong",[t._v("思考")]),t._v("：")]),t._v(" "),v("p",[t._v("TCP提供了一种字节流服务，而收发双方都不保持记录的边界，应用程序应该如何提供他们自己的记录标识呢？")]),t._v(" "),v("p",[t._v("答：应用程序使用自己约定的规则来表示消息的边界，如有一些使用 回车加换行 （“\\r\\n”），比如 Redis 的通信协议。")])])}),[],!1,null,null,null);_.default=a.exports}}]);