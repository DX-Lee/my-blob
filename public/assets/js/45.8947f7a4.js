(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{528:function(t,v,_){"use strict";_.r(v);var s=_(4),e=Object(s.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h4",{attrs:{id:"tcp-端口号"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-端口号"}},[t._v("#")]),t._v(" TCP 端口号")]),t._v(" "),_("p",[t._v("网络分层结构中每一层都一个唯一标识，如链路层 MAC 地址，IP 层 IP 地址，传输层用端口号标识。")]),t._v(" "),_("p",[t._v("端口号的范围为0 ~ 65536 其中")]),t._v(" "),_("ul",[_("li",[t._v("熟知端口：0~1024")]),t._v(" "),_("li",[t._v("已登记端口 ： 1024 ~ 49151 （取最大值的 3/4 - 1 ：49151 = 65536 * 3/4 - 1 ）")]),t._v(" "),_("li",[t._v("临时端口：49151~ 65536")])]),t._v(" "),_("p",[_("strong",[t._v("熟知端口")])]),t._v(" "),_("p",[t._v("​\t熟知端口号由专门的机构由 IANA 分配和控制，范围为 0~1023。为了能让客户端能随时找到自己，服务端程序的端口必须要是固定的。很多熟知端口号已经被用就分配给了特定的应用，比如 HTTP 使用 80端口，HTTPS 使用 443 端口，ssh 使用 22 端口")]),t._v(" "),_("p",[_("strong",[t._v("已登记端口")])]),t._v(" "),_("p",[t._v("​\t已登记的端口常见的端口号有：")]),t._v(" "),_("ul",[_("li",[t._v("MySQL：3306")]),t._v(" "),_("li",[t._v("Redis：6379")]),t._v(" "),_("li",[t._v("MongoDB：27017")])]),t._v(" "),_("p",[t._v("临时端口：")]),t._v(" "),_("p",[t._v("​\t如果应用程序没有调用 bind() 函数将 socket 绑定到特定的端口上，那么 TCP 和 UDP 会为该 socket 分配一个唯一的临时端口。")])])}),[],!1,null,null,null);v.default=e.exports}}]);