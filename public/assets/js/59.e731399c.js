(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{538:function(s,n,a){"use strict";a.r(n);var e=a(4),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"一-什么是跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-什么是跨域"}},[s._v("#")]),s._v(" 一. 什么是跨域？")]),s._v(" "),a("p",[s._v("首先要知道浏览器的"),a("strong",[s._v("同源策略")]),s._v("，当 两个url的"),a("strong",[s._v("协议名")]),s._v(" + "),a("strong",[s._v("域名")]),s._v(" + "),a("strong",[s._v("端口号")]),s._v(" 都相同时，浏览器才认为它们是同源的，否则就是非同源。"),a("strong",[s._v("同源策略")]),s._v(" 是为了限制窗口和iframe之间的互相访问，保护用户的信息安全。")]),s._v(" "),a("p",[s._v("同源策略限制的内容包括：")]),s._v(" "),a("ol",[a("li",[s._v("cookie，LocalStorage，IndexDB等存储内容")]),s._v(" "),a("li",[s._v("DOM节点访问")]),s._v(" "),a("li",[s._v("AJAX请求可以发送，但是浏览器会拦截")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",[s._v("​\t如果窗口是非同源的，我们无法访问其中文档，变量等任何东西，但是有一个例外是location：我们可以修改它，但是不能读取。")])]),s._v(" "),a("h3",{attrs:{id:"二-如何解决跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-如何解决跨域"}},[s._v("#")]),s._v(" 二. 如何解决跨域？")]),s._v(" "),a("p",[a("strong",[s._v("1. JSONP")])]),s._v(" "),a("p",[s._v("原理：利用了script标签没有跨域限制，通过发送带有callback参数的get请求的url，服务端通过接口返回的数据拼接到callback参数中返回，由浏览器去执行，从而拿到callback返回的数据。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<script>\n\tlet script = document.createElement('script')\n\tscript.src = 'http://www.server.com?jsonp=callback'\n\tdocument.body.appendChild(script)\n\twindow[callback] = function (data) {\n\t\tconsole.log(data)\n\t}\n<\/script>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("优点：兼容性好，可用于解决主流浏览器的跨域数据问题")]),s._v(" "),a("p",[s._v("缺点：只能发送get请求，不安全可能会遭受xss攻击")]),s._v(" "),a("p",[a("strong",[s._v("2.CORS")])]),s._v(" "),a("p",[s._v("CORS 全称是：跨域资源共享（Cross-origin resource sharing）,它允许浏览器向跨域的服务器发送AJAX请求，从而克服了AJAX的同源限制。")]),s._v(" "),a("p",[s._v("CORS需要浏览器和后端同时支持，现在浏览器都会自动进行CORS通信，所以关键是后端的设置。CORS通信和普通的AJAX请求没有差别，只是浏览器发现跨域的AJAX请求，就会自动添加上一些附加的头信息，有时还会多发出一次附加请求，用户是感知不到的。CORS的请求分为两种 简单请求的非简单请求。")]),s._v(" "),a("p",[s._v("（1）简单请求")]),s._v(" "),a("p",[s._v("​\t满足以下两大条件就属于简单请求")]),s._v(" "),a("p",[s._v("请求方法是以下三种方法之一：")]),s._v(" "),a("blockquote",[a("p",[s._v("HEAD")]),s._v(" "),a("p",[s._v("GET")]),s._v(" "),a("p",[s._v("POST")])]),s._v(" "),a("p",[s._v("HTTP的头信息不超出以下几种字段：")]),s._v(" "),a("blockquote",[a("p",[s._v("Accept")]),s._v(" "),a("p",[s._v("Accept-Language")]),s._v(" "),a("p",[s._v("Content-Language")]),s._v(" "),a("p",[s._v("Content-Type: 只限于三个值 text/plain， application/x-www-form-urlencoded，multipart/form-data")])]),s._v(" "),a("p",[s._v("凡是不满足上面两个条件的都属于非简单请求。")]),s._v(" "),a("p",[s._v("简单的说"),a("strong",[s._v("简单请求就是简单的HTTP方法和HTTP头信息的结合")])]),s._v(" "),a("p",[s._v("当浏览器发现跨域的AJAX请求时一个简单请求时，会自动在头信息中增加一个Origin字段，表示请求来自哪个域（协议名+域名+端口号），服务器根据这个值来决定是否同意这次请求。如果Origin指定的源在服务器的白名单上，则返回的HTTP回应头信息中会多几个字段：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Access-Control-Allow-Origin:  该字段是必须的，它的值要么包括请求时Origin字段中的值，要么为 * ，表示接受来自任何域的请求\nAccess-Control-Allow-Expose-Headers: 可选，CORS请求时XMLHttpRequest的getRespnseHeader() 方法只能拿到 Cache-Control, Content-Language,Content-Type,Last-Modified,Expires,Pragma,如何想拿到其他字段就必须要这的头信息上指定\nAccess-Control-Allow-Credentials: 可选，表示是否允许发送Cookie\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",[s._v("要想在请求中携带cookie 必须设置 withCredentials 这个属性为true，否则就算服务器要求发送Cookie，浏览器也不会发送。另外需要注意的是如果服务器要求浏览器发送cookie, Access-Control-Allow-Origin 就不能设置为 *")])]),s._v(" "),a("p",[s._v("非简单请求就是想服务器提出特殊要求的请求，比如说方法为PUT ,DELETE 或者 Content-Type 的字段类型是 application/json")]),s._v(" "),a("p",[s._v("非简单请求会在正式通信前增加一次查询请求，被称为’预检请求‘。浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 方法和头信息字段。只有得到肯定答复，浏览器才会发出正式的"),a("code",[s._v("XMLHttpRequest")]),s._v("请求，否则就报错。目的是为了防止这些新增的请求对传统的没有cors支持的服务器形成压力，给它一个提前拒绝的机会。")]),s._v(" "),a("p",[s._v("''预检请求'的请求方法是OPTIONS, 表示这个请求时用来询问的，头信息中会加上一个关键字段Origin, 表示请求的来源。")]),s._v(" "),a("p",[s._v("除了Origin之外，’预检请求‘的头信息还包括两个字段：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Access-Control-Request-Method: 该字段是必须的，用来列出浏览器的CORS会用哪些方法\nAccess-Control-Request-Headers: 用来指定浏览器CORS会额外发送的头信息字段\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("服务器收到’预见请求‘的回应后，会检查Origin, Access-Control-Request-Method,Access-Control-Request-Headers,允许确认跨域后就可以做出回应。返回的HTTP回应中会带有 Access-Control-Allow-Origin，还包括以下其他字段")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Access-Control-Allow-Methods: 表示允许请求的方法\nAccess-Control-Allow-Headers: 如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在“预检”中请求的字段\nAccess-Control-Allow-Credentials: 与简单请求含义相同\nAccess-Control-Max-Age: 可选，表示预检请求的有效期，在此期间内不用在发送另外的预检请求\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("一旦服务器通过了“预检”请求，以后每次浏览器正常的 CORS 请求，就都跟简单请求一样，会有一个"),a("code",[s._v("Origin")]),s._v("头信息字段。服务器的回应，也都会有一个"),a("code",[s._v("Access-Control-Allow-Origin")]),s._v("头信息字段。")]),s._v(" "),a("p",[s._v("如果没有通过，则返回正常的不包含CORS头信息的HTTP回应, 或者明确表示请求不符合条件。浏览器就会认定服务器不通过预见请求，触发一次错误，被"),a("code",[s._v("XMLHttpRequest")]),s._v("对象的"),a("code",[s._v("onerror")]),s._v("回调函数捕获。")]),s._v(" "),a("p",[s._v("CORS比JSONP更加强大，支持所有类型的HTTP请求。")]),s._v(" "),a("p",[a("strong",[s._v("3. postMessage")])]),s._v(" "),a("p",[s._v("postMessage 允许不同源窗口之间进行有限的通信。前提需要拿到对方的引用")]),s._v(" "),a("p",[s._v("postMessage(data, targetOrigin)")]),s._v(" "),a("p",[s._v("targetOrigin 指定目标窗口的源，只有当窗口的源时给定的值才能接受到数据。targetOrigin 是一种安全措施，当目标窗口是非同源的时候，我们无法拿到它的location的值，即我们不知道窗口打开的是哪个网站。指定targetOrigin 可以保证窗口处于我们期望中的网站时接收数据。如果不希望做检查可以设置为 * 。")]),s._v(" "),a("p",[s._v("例如 http:// localhost: 3000/a.html 向 http: //localhost: 4000/b.html 传递信息")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// a.html")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("iframe src"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://localhost:4000/b.html"')]),s._v(" frameborder"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0"')]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'frame'")]),s._v(" onload"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'onload'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("iframe"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("load")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" frame "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("frames"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("frame\n    frame"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("postMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'http://localhost:4000'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// b.html\nwindow.onmessage = (e) => {\n \t// 传递的事件对象e中\n \t// e.data: 'hello'\n \t// e.origin: 'http://localhost:3000/a.html'\n \t// e.source 发送方窗口的引用\n\tconsole.log(e.data)\n\t// e.source.postMessage('hi', '*')\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("4. document.domain")])]),s._v(" "),a("p",[s._v("如果两个窗口的二级域相同，如：a.site.com, b.site.com, c.site.com，我们可以通过在每个窗口设置 "),a("strong",[s._v('document.domain = "site.com"')]),s._v(" 使浏览器忽略该差异，将它们视为“同源”，这样就可以无限制的交互了。但是仅限于二级域名相同的情况。")]),s._v(" "),a("p",[a("strong",[s._v("5. location.hash + iframe")])]),s._v(" "),a("p",[s._v("实现原理: 利用非同源窗口 可以写入location的特例，通过监听hash值的变化传递信息。")]),s._v(" "),a("p",[s._v("例如 a.html 向 b.html 跨域通信，需借助一个中间页c.html。a c为同源")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(' // a.html\n  <iframe src="http://localhost:4000/b.html#hello"></iframe>\n  <script>\n  // 传递的值放在hash中\n    window.onhashchange = function () { //检测hash的变化\n      console.log(location.hash);\n    }\n  <\/script>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// b.html\n console.log(location.hash);\n  let iframe = document.createElement('iframe');\n  iframe.src = 'http://localhost:3000/c.html#hi';\n  document.body.appendChild(iframe);\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// c.html\n<script>\n    window.parent.parent.location.hash = location.hash \n    //c 可通过 window.parent.parent访问到 a\n  <\/script>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("6.  window.name + iframe")])]),s._v(" "),a("p",[s._v("实现原理：window 对象的 name 属性是一个很特别的属性，当该 window 的 location 变化，然后重新加载，它的 name 属性可以依然保持不变。")]),s._v(" "),a("p",[s._v("例如 a 向 c 跨域通信，借助中间页b 。a 和 b 同源")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// a.html\n<iframe\n  src="http://localhost:4000/name/c.html"\n  frameborder="0"\n  onload="load()"\n  id="iframe"\n></iframe>\n<script>\n  let first = true;\n  // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name\n  function load() {\n    if (first) {\n      // 第1次onload(跨域页)成功后，切换到同域代理页面\n      iframe.src = "http://localhost:3000/name/b.html";\n      first = false;\n    } else {\n      // 第2次onload(同域b.html页)成功后，读取同域window.name中数据\n      console.log(iframe.contentWindow.name);\n    }\n  }\n<\/script>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// c.html\n<script>\n\twindow.name = 'hello'\n<\/script>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// b.html\n不需要做什么操作，为空即可\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("7. node服务器中间件代理")])]),s._v(" "),a("p",[s._v("跨域原理：'同源策略'是浏览器才有的，服务器之间不需要遵循同源策略。")]),s._v(" "),a("p",[s._v("我们需要一个代理服务器，它需要做一下事情：")]),s._v(" "),a("ul",[a("li",[s._v("接收客户端请求")]),s._v(" "),a("li",[s._v("将请求转发给服务器")]),s._v(" "),a("li",[s._v("拿到响应的数据")]),s._v(" "),a("li",[s._v("将数据发送给客户端")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// index.html(http://127.0.0.1:5500)\n <script src=\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"><\/script>\n    <script>\n      $.ajax({\n        url: 'http://localhost:3000',\n        type: 'post',\n        data: { name: 'xiamen', password: '123456' },\n        contentType: 'application/json;charset=utf-8',\n        success: function(result) {\n          console.log(result) // {\"title\":\"fontend\",\"password\":\"123456\"}\n        },\n        error: function(msg) {\n          console.log(msg)\n        }\n      })\n     <\/script>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/ server1.js 代理服务器(http://localhost:3000)\nconst http = require('http')\n// 第一步：接受客户端请求\nconst server = http.createServer((request, response) => {\n  // 代理服务器，直接和浏览器直接交互，需要设置CORS 的首部字段\n  response.writeHead(200, {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': '*',\n    'Access-Control-Allow-Headers': 'Content-Type'\n  })\n  // 第二步：将请求转发给服务器\n  const proxyRequest = http\n    .request(\n      {\n        host: '127.0.0.1',\n        port: 4000,\n        url: '/',\n        method: request.method,\n        headers: request.headers\n      },\n      serverResponse => {\n        // 第三步：收到服务器的响应\n        var body = ''\n        serverResponse.on('data', chunk => {\n          body += chunk\n        })\n        serverResponse.on('end', () => {\n          console.log('The data is ' + body)\n          // 第四步：将响应结果转发给浏览器\n          response.end(body)\n        })\n      }\n    )\n    .end()\n})\nserver.listen(3000, () => {\n  console.log('The proxyServer is running at http://localhost:3000')\n})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/ server2.js(http://localhost:4000)\nconst http = require('http')\nconst data = { title: 'fontend', password: '123456' }\nconst server = http.createServer((request, response) => {\n  if (request.url === '/') {\n    response.end(JSON.stringify(data))\n  }\n})\nserver.listen(4000, () => {\n  console.log('The server is running at http://localhost:4000')\n})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("注意：浏览器向代理服务器之间需遵循同源原则，需要跨域。")]),s._v(" "),a("p",[a("strong",[s._v("8.nginx反向代理")])]),s._v(" "),a("p",[s._v("实现原理：类似于node服务器，使用nginx反向代理实现跨域，是最简单的跨域方式。只需要修改nginx的配置即可解决跨域问题，支持所有浏览器，支持session，不需要修改任何代码，并且不会影响服务器性能。")]),s._v(" "),a("p",[s._v("nginx 配置")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// proxy服务器\nserver {\n    listen       81;\n    server_name  www.domain1.com;\n    location / {\n        proxy_pass   http://www.domain2.com:8080;  #反向代理\n        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名\n        index  index.html index.htm;\n\n        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用\n        add_header Access-Control-Allow-Origin http://www.domain1.com;  #当前端只跨域不带cookie时，可为*\n        add_header Access-Control-Allow-Credentials true;\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[a("strong",[s._v("9.websocket")])]),s._v(" "),a("p",[s._v("websocket 是HTML5的一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。WebSocket和HTTP都是应用层协议，都基于 TCP 协议。但是 "),a("strong",[s._v("WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据")]),s._v("。同时，WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。")]),s._v(" "),a("p",[s._v("原生WebSocket API使用起来不太方便，我们使用"),a("code",[s._v("Socket.io")]),s._v("，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// client.html\nlet socket = new WebSocket('http://localhost:3000')\nsocket.onopen = function() {\n\tsocket.send('hello') // 向服务器发送数据\n}\nsocket.onmessage = function (e) {\n\tconsole.log(e.data) // hi 接收服务器传来的参数\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// server.js\nlet express = require('express');\nlet app = express();\nlet WebSocket = require('ws');//记得安装ws\nlet wss = new WebSocket.Server({port: 3000})\nwss.on('connection', function (ws) {\n\tws.on('message', function (data) {\n\t\tconsole.log(data) // hello\n\t\tws.send('hi')\n\t})\n})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"三-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-总结"}},[s._v("#")]),s._v(" 三. 总结")]),s._v(" "),a("ol",[a("li",[s._v("JSONP 只能发送get请求，优势在于支持旧的浏览器，以及向不支持CORS的网站请求数据")]),s._v(" "),a("li",[s._v("CORS 支持所有类型的HTTP请求，是跨域HTTP的根本解决方案")]),s._v(" "),a("li",[s._v("node和nginx都是利用服务器之间没有同源限制")]),s._v(" "),a("li",[s._v("window.name，window.location hash，window.domain 可以进行有限的通信，利用postMessage可以实现不同源的窗口间通信，前提需要拿到对方的引用。")])])])}),[],!1,null,null,null);n.default=t.exports}}]);